"use strict";const e=require("events"),t=Buffer.from("\r","ascii")[0],s=Buffer.from("\n","ascii")[0];class r extends e{constructor(){super(),this.buffer=Buffer.allocUnsafe(8192),this.index=0,this.headers=null,this.body=null}append(e){this.index+e.length>=this.buffer.length?(this.buffer=Buffer.concat([this.buffer],this.buffer.length+Math.max(8192,e.length)),this.buffer.set(e,this.index)):this.buffer.set(e,this.index),this.index+=e.length,this.read()}read(){this.readHeaders(),this.readBody(),this.body&&(this.emit("request",this.headers,this.body),this.headers=null,this.body=null)}readHeaders(){if(this.headers)return;let e=0;for(;e<this.index+1&&(this.buffer[e]!==t||this.buffer[e+1]!==s||this.buffer[e+2]!==t||this.buffer[e+3]!==s);)e+=1;if(!this.buffer[e+3])return;const r=this.buffer.toString("ascii",0,e).split("\r\n"),i=new Map(r.map((e=>{const[t,...s]=e.split(":");return[t,s.join().trim()]})));this.headers=i,this.bodyLength=parseInt(this.headers.get("Content-Length"),10),this.buffer=this.buffer.slice(e+4),this.index-=e+4}readBody(){if(!this.bodyLength)return;if(this.index<this.bodyLength)return;const e=this.buffer.toString("utf8",0,this.bodyLength);this.body=JSON.parse(e),this.buffer=this.buffer.slice(this.bodyLength),this.index-=this.bodyLength}}module.exports=class{constructor(e,t){this.processRequest=this.processRequest.bind(this),this.readFromStream=this.readFromStream.bind(this),this.readStream=e,this.writeStream=t,this.requestHandlers=new Map,this.buffer=new r,this.buffer.on("request",this.processRequest),this.readStream.on("readable",this.readFromStream)}onRequest(e,t){this.requestHandlers.set(e,t)}async readFromStream(){let e;for(;null!==(e=this.readStream.read());)try{this.buffer.append(e)}catch(e){process.exit(50)}}async processRequest(e,t){Object.prototype.hasOwnProperty.call(t,"id")||process.exit(51);const s=this.requestHandlers.get(t.method);if(!s)return this.sendError(t.id,-32601,"Method not found");try{const e=await s(t.params);this.write({result:e,id:t.id})}catch(e){if("string"==typeof e)return{error:{message:e}};this.write({id:t.id,result:{error:{name:e.name,message:e.message,stack:e.stack}}})}}sendError(e,t,s){this.write({id:e,error:{code:t,message:s}})}notify(e,t){this.write({method:e,params:t})}write(e){const t=JSON.stringify({jsonrpc:"2.0",...e},null,null),s=Buffer.from(t,"utf8"),r=Buffer.from(`Content-Length: ${s.length}\r\n\r\n`,"ascii");this.writeStream.write(r),this.writeStream.write(s)}};
