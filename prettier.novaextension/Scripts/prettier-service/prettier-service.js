"use strict";const t=require("./json-rpc.js");class r{constructor(t){this.format=this.format.bind(this),this.hasConfig=this.hasConfig.bind(this),this.jsonRpc=t,this.jsonRpc.onRequest("format",this.format),this.jsonRpc.onRequest("hasConfig",this.hasConfig),this.jsonRpc.notify("didStart")}async format({original:t,pathForConfig:r,ignorePath:e,options:o}){throw new Error("Implementation missing")}async hasConfig({pathForConfig:t}){throw new Error("Implementation missing")}}class e extends r{static isCorrectModule(t){return"function"==typeof t.format&&"function"==typeof t.getFileInfo&&"function"==typeof t.resolveConfig}constructor(t,r){super(t),this.prettier=r}async format({original:t,pathForConfig:r,ignorePath:e,options:o}){const{ignored:i,config:s}=await this.getConfig({pathForConfig:r,ignorePath:e,options:o});if(i)return{ignored:!0};if(!s.parser)return{missingParser:!0};try{return{formatted:await this.prettier.format(t,s)}}catch(t){if(t.message.includes("Couldn't resolve parser"))return{missingParser:!0};throw t}}async hasConfig({pathForConfig:t}){return null!==await this.prettier.resolveConfig(t)}async getConfig({pathForConfig:t,ignorePath:r,options:e}){let o={};if(e.filepath&&(o=await this.prettier.getFileInfo(e.filepath,{ignorePath:r,withNodeModules:!1}),o.ignored))return{ignored:!0};const i=await this.prettier.resolveConfig(t,{editorconfig:!0}),s={...e,...i};return o.inferredParser&&(s.parser=o.inferredParser),{ignored:!1,config:s}}}class o extends r{static isCorrectModule(t){return"function"==typeof t}constructor(t,r){super(t),this.format=r}async format({original:t,pathForConfig:r,ignorePath:e,options:o}){return{formatted:this.format({text:t,fallbackPrettierOptions:o})}}async hasConfig({pathForConfig:t}){return!1}}const i=new t(process.stdin,process.stdout),[,,s]=process.argv;try{const t=require(s);if(s.includes("prettier-eslint")&&o.isCorrectModule(t))new o(i,t);else{if(!e.isCorrectModule(t))throw new Error(`Module at ${s} does not appear to be prettier or prettier-eslint`);new e(i,t)}}catch(t){i.notify("startDidFail",{name:t.name,message:t.message,stack:t.stack}),process.exit()}
